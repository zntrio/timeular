// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: timeular/events/v1/hub_api.proto

package eventsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventHubService_Subscribe_FullMethodName = "/timeular.events.v1.EventHubService/Subscribe"
)

// EventHubServiceClient is the client API for EventHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventHubServiceClient interface {
	// List for device events.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventHubService_SubscribeClient, error)
}

type eventHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventHubServiceClient(cc grpc.ClientConnInterface) EventHubServiceClient {
	return &eventHubServiceClient{cc}
}

func (c *eventHubServiceClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventHubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventHubService_ServiceDesc.Streams[0], EventHubService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventHubServiceSubscribeClient{stream}
	return x, nil
}

type EventHubService_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type eventHubServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventHubServiceSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventHubServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventHubServiceServer is the server API for EventHubService service.
// All implementations must embed UnimplementedEventHubServiceServer
// for forward compatibility
type EventHubServiceServer interface {
	// List for device events.
	Subscribe(EventHubService_SubscribeServer) error
	mustEmbedUnimplementedEventHubServiceServer()
}

// UnimplementedEventHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventHubServiceServer struct {
}

func (UnimplementedEventHubServiceServer) Subscribe(EventHubService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventHubServiceServer) mustEmbedUnimplementedEventHubServiceServer() {}

// UnsafeEventHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventHubServiceServer will
// result in compilation errors.
type UnsafeEventHubServiceServer interface {
	mustEmbedUnimplementedEventHubServiceServer()
}

func RegisterEventHubServiceServer(s grpc.ServiceRegistrar, srv EventHubServiceServer) {
	s.RegisterService(&EventHubService_ServiceDesc, srv)
}

func _EventHubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventHubServiceServer).Subscribe(&eventHubServiceSubscribeServer{stream})
}

type EventHubService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type eventHubServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventHubServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventHubServiceSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventHubService_ServiceDesc is the grpc.ServiceDesc for EventHubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventHubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeular.events.v1.EventHubService",
	HandlerType: (*EventHubServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventHubService_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "timeular/events/v1/hub_api.proto",
}
